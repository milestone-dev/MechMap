// Integration:
// #1 - In EE2->Plugins:
// * Put the eps file somewhere on your disk and put the full path in the "Additional eds text" field. Example: 
// [C:\Users\milestone\Documents\StarCraft\Maps\Mechs\system.eps]
// #2 - In EE2->FileManager:
// * Fill strings 1539-1548 with empty spaces. This will support dynamic tooltips of variable length. Copy the below spaces between quote marks
// "                                                                "
// #3 - In EE2->Firegraft:
// * Change Unit Training requirements for units 74-82 to "Always". These are our placeholder units to make custom buttons work.
// * Change Button Set for command card 249: Fill with "Hold Position" buttons (copy the below). This is our dynamic command card we can change buttons for
/*
001000255000208130066000112051066000000000000000156002000000
002000255000208130066000112051066000000000000000156002000000
003000255000208130066000112051066000000000000000156002000000
004000255000208130066000112051066000000000000000156002000000
005000255000208130066000112051066000000000000000156002000000
006000255000208130066000112051066000000000000000156002000000
007000255000208130066000112051066000000000000000156002000000
008000255000208130066000112051066000000000000000156002000000
009000255000208130066000112051066000000000000000156002000000
*/

const PlayerMech = EUDArray(6);
const PlayerCommandCard = EUDArray(6);
const PlayerWeaponID = EUDArray(6);
const PlayerPodID = EUDArray(6);
const BaseUnitID = 17; // Alan Schezar Goliath
const TurretUnitBaseID = 194; // Zerg Beacon
const PlayerWeaponBaseID = 122; // Unused Gauss Rifle
const DynamicButtonSetID = 249;
const DynamicButtonSetFirstUnitType = 74; // Dark Templar Hero
const DynamicButtonSetFirstStringID = 1539; // Unused string
const String_Empty = Db("");
const String_Move = Db("m\x03\x03M\x01ove");
const String_Stop = Db("s\x03\x03S\x01top");
const String_Attack = Db("a\x03\x03A\x01ttack");
const String_Ability = Db("q\x03\x03Q\x01 - Use ability");
const String_Cancel = Db("\x1B\x03\x03ESC\x01 - Cancel");
const String_Change_Weapon = Db("w\x03\x01 Change \x03W\x01eapon");
const String_Reconfigure_Modules = Db("x\x03\x01 Reconfigure Au\x03x\x01ilary Modules");
const SpawnLocation1 = $L("Spawns");
const SpawnLocation2 = $L("Spawns 2");
const TempLocation = $L("Temp");
const Screen = StringBuffer(256);
const WeaponMap = [7, 8, 18, 38, 66, 46, 48, 70];

// Utils functions

function getWeaponIconID(weaponID) {
	return wread(0x6564E0 + 672 + weaponID * 2);
}

function refreshInterface() {
    CreateUnit(1, 37, TempLocation, $P8);
    KillUnitAt(All, 37, TempLocation, $P8);
}

function isUnitBuildingUnitType(epd, unitType) {
	if(wread_epd(epd + 0x098 / 4,  0x098 % 4) == unitType || wread_epd(epd + 0x09A / 4,  0x09A % 4) == unitType || wread_epd(epd + 0x09C / 4,  0x09C % 4) == unitType || wread_epd(epd + 0x09E / 4,  0x09E % 4) == unitType || wread_epd(epd + 0x0A0 / 4,  0x0A0 % 4) == unitType ) return true;
	return False;
}

function isUnitBuildingUnit(epd) {
	if(wread_epd(epd + 0x098 / 4,  0x098 % 4) != 228) return true;
	return False;
}

function getButtonIndexFromBuildQueue(epd) {
	return wread_epd(epd + 0x098 / 4, 0x098 % 4) - DynamicButtonSetFirstUnitType;
}

function hideAllButtonIcons() {
	if (IsUserCP()) {
		for (var position = 0; position < 9; position++) {
			const btnPtr = EPD(0x5187EC) + DynamicButtonSetID * 3;
		    var btnPos = 5 * position;
		    dwadd_epd(btnPtr, 0);
		    btnPos += epdread_epd(btnPtr);
		    const oldCP = getcurpl();
		    DoActions(list(
			    SetMemory(0x6509B0, SetTo, btnPos),
			    SetMemory(0x6509B0, Add, 1),
				SetDeaths(CurrentPlayer, SetTo, 5106496, 0),
			    SetMemory(0x6509B0, Add, 1),
			    SetMemory(0x6509B0, Add, 1),
			    SetMemory(0x6509B0, Add, 1),
			    SetMemory(0x6509B0, SetTo, oldCP)
		    ));
		}
	}
}

function setButtonIconWithState(position, iconID, title, subtitle, enabled, actionType) {
	// Must be executed for localCP
	const count = 0;
	const forceDisable = false;
	if (forceDisable) enabled = false;

	if (IsUserCP()) {
	    const stringID = 1539 + position;
	    const buttonStringValue = stringID + (65536 * stringID);
	    if (forceDisable) {
			settblf(stringID, 0, "{:s}", String_Empty);
	    } else {
	    	if (subtitle != 0) {
				if (count < 2) settblf(stringID, 0, "{:s}\n{:s}", title, subtitle);
				else if (actionType == 6) settblf(stringID, 0, "{:s}\n{:s}\nCooldown: {}", title, subtitle, count); // Ability
			    else settblf(stringID, 0, "{:s}\n(Count: {})\n{:s}", title, count, subtitle);
	    	} else {
	    		if (count < 2) settblf(stringID, 0, "{:s}", title);
				else if (actionType == 6) settblf(stringID, 0, "{:s}\n{:s}", title, subtitle); // Ability
			    else settblf(stringID, 0, "{:s}\n(Count: {})", title, count);
	    	}
		}

	    var conditionValue;
	    if (enabled) {
	    	conditionValue = 4358864;  //Always display
	    } else {
	    	conditionValue = 4359904; //Has interceptors
	    }

	    var action;
	    var actionPrefix;

	    if (actionType == 1) { // create unit
		 	// 3 is Create Unit
		    action = 3 + (DynamicButtonSetFirstUnitType + position) * 65536;
		    actionPrefix = 4338864; //Unknown but write anyway
	    } else if (actionType == 2) { // cancel
	    	action = 228 * 65536;
		    actionPrefix = 4561648; //Unknown but write anyway
	    } else if (actionType == 3) {// Move
	    	actionPrefix = 4342848;
	    	action = 0;
	    } else if (actionType == 4) {// Stop
	    	actionPrefix = 4338672;
	    	action = 0;
	    } else if (actionType == 5) {// Attack
	    	actionPrefix = 4342656;
	    	action = 0;
	    } else if (actionType == 6) {// Patrol
	    	actionPrefix = 4342080;
	    	action = 0;
	    }

		iconID = (iconID * 65536) + position + 1;
	    const btnPtr = EPD(0x5187EC) + DynamicButtonSetID * 3;
	    var btnPos = 5 * position;
	    dwadd_epd(btnPtr, 0);
	    btnPos += epdread_epd(btnPtr);
	    const oldCP = getcurpl();
	    DoActions(list(
		    SetMemory(0x6509B0, SetTo, btnPos),
		    SetDeaths(CurrentPlayer, SetTo, iconID, 0),
		    SetMemory(0x6509B0, Add, 1),
	    	SetDeaths(CurrentPlayer, SetTo, conditionValue, 0),
		    SetMemory(0x6509B0, Add, 1),
		    SetDeaths(CurrentPlayer, SetTo, actionPrefix, 0), 
		    SetMemory(0x6509B0, Add, 1),
		    SetDeaths(CurrentPlayer, SetTo, action, 0),
		    SetMemory(0x6509B0, Add, 1),
		    SetDeaths(CurrentPlayer, SetTo, buttonStringValue, 0),
		    SetMemory(0x6509B0, SetTo, oldCP)
	    ));
	}
}

function clearBuildQueue(epd) {
    wwrite_epd(epd + 0x098 / 4, 0x098 % 4, 228);
    wwrite_epd(epd + 0x09A / 4, 0x09A % 4, 228);
    wwrite_epd(epd + 0x09C / 4, 0x09C % 4, 228);
    wwrite_epd(epd + 0x09E / 4, 0x09E % 4, 228);
    wwrite_epd(epd + 0x0A0 / 4, 0x0A0 % 4, 228);
    epd += 0x098 / 4;
    const oldcp = getcurpl();
    setcurpl(epd);
    DoActions(list(
	    SetDeaths(CurrentPlayer, SetTo, 0xE400E4, 0),
	    SetMemory(0x6509B0, Add, 1),
	    SetDeaths(CurrentPlayer, SetTo, 0xE400E4, 0),
	    SetMemory(0x6509B0, Add, 1),
	    SetDeathsX(CurrentPlayer, SetTo, 228, 0, 0xFFFF),
	    SetMemory(0x6509B0, Add, 1),
	    SetDeathsX(CurrentPlayer, SetTo, 0x20000, 0, 0xFF0000),
    ));
    setcurpl(oldcp);
}

function createMech(playerID, location) {	
	const turretUnitID = TurretUnitBaseID + playerID;
	const weaponID = PlayerWeaponBaseID + playerID;
	bwrite(0x65FD00 + 12704 + turretUnitID * 1, 4);
	bwrite(0x65FD00 + 13856 + turretUnitID * 1, 22);
	bwrite(0x65FD00 + 15696 + turretUnitID * 1, 4);
	bwrite(0x65FD00 + 19352 + turretUnitID * 1, 4);
	bwrite(0x65FD00 + 9576 + turretUnitID * 1, 4);
	bwrite(0x65FD00 + 9112 + turretUnitID * 1, 1);
	bwrite(0x65FD00 + 18424 + turretUnitID * 1, 76);
	bwrite(0x65FD00 + 13392 + turretUnitID * 1, 5);
	dwwrite(0x65FD00 + 17280 + turretUnitID * 4, 0x30000010);
	bwrite(0x65FD00 + 14776 + turretUnitID * 1, weaponID);
	wwrite(0x65FD00 + 2752 + BaseUnitID * 2, turretUnitID);
	const epd = epdread_epd(EPD(0x628438));
	CreateUnit(1, BaseUnitID, location, playerID);
    wwrite_epd(epd + 0x094 / 4,  0x094 % 4, DynamicButtonSetID);
	return epd;
}

function setCommandCard(commandCard) {
	const playerID = getcurpl();
	hideAllButtonIcons();	
	switch(commandCard) {
		case 0: // Default
			setButtonIconWithState(0, 228, String_Move, 0, true, 3);
			setButtonIconWithState(1, 229, String_Stop, 0, true, 4);
			setButtonIconWithState(2, 230, String_Attack, 0, true, 5);
			setButtonIconWithState(7, 233, String_Change_Weapon, 0, true, 1);
			setButtonIconWithState(8, 235, String_Reconfigure_Modules, 0, true, 1);
		break;
		case 1: // Change weapon menu
			for (var i = 0; i < 8; i++) {
				var enabled = true;
				if (PlayerWeaponID[playerID] == i) enabled = false;
				setButtonIconWithState(i, getWeaponIconID(WeaponMap[i]), String_Empty, 0, enabled, 1);
			}
			setButtonIconWithState(8, 236, String_Cancel, 0, true, 1);
		break;
		case 2: // Change pod menu
			for (var i = 0; i < 8; i++) {
				var enabled = true;
				if (PlayerPodID[playerID] == i) enabled = false;
				setButtonIconWithState(i, 384, String_Empty, 0, enabled, 1);
			}
			setButtonIconWithState(8, 236, String_Cancel, 0, true, 1);
		break;
	}
	PlayerCommandCard[getcurpl()] = commandCard;
	refreshInterface();
}

function setupMap() {
	for (var unitID = DynamicButtonSetFirstUnitType; unitID < DynamicButtonSetFirstUnitType + 9; unitID++) {
	    bwrite(0x65FD00 + 16360 + unitID * 1, 0);
	    wwrite(0x65FD00 + 15240 + unitID * 2, 0);
	    wwrite(0x65FD00 + 0 + unitID * 2, 0);
	    wwrite(0x65FD00 + 1832 + unitID * 2, 3000);
	}

	if (Command($P1, 0, 1, 215)) PlayerMech[$P1] = createMech($P1, $L("Spawns"));
	if (Command($P2, 0, 1, 215)) PlayerMech[$P2] = createMech($P2, $L("Spawns"));
	if (Command($P3, 0, 1, 215)) PlayerMech[$P3] = createMech($P3, $L("Spawns"));
	if (Command($P4, 0, 1, 215)) PlayerMech[$P4] = createMech($P4, $L("Spawns 2"));
	if (Command($P5, 0, 1, 215)) PlayerMech[$P5] = createMech($P5, $L("Spawns 2"));
	if (Command($P6, 0, 1, 215)) PlayerMech[$P6] = createMech($P6, $L("Spawns 2"));

    EUDPlayerLoop()();
		setCommandCard(0);
    EUDEndPlayerLoop();

	refreshInterface();
}

function changeWeapon(playerID, id) {
	const turretUnitID = TurretUnitBaseID + playerID;
	const weaponID = WeaponMap[id];
	PlayerWeaponID[playerID] = id;
	bwrite(0x65FD00 + 14776 + turretUnitID * 1, weaponID);
	Screen.printf("Changing to weapon: {}", weaponID);
}

function changePod(playerID, id) {
	// Screen.printf("Player: {} ID: {}", playerID, id);
	PlayerPodID[playerID] = id;
	Screen.printf("Changing to pod: {}", id);
}

function handleMech(playerID, epd) {
	setcurpl(playerID);
	if (isUnitBuildingUnit(epd)) {
		const button = getButtonIndexFromBuildQueue(epd);
		clearBuildQueue(epd);
		const commandCardID = PlayerCommandCard[getcurpl()];
		if (commandCardID == 0) {
			if (button == 7) setCommandCard(1); // Change Weapon
			else if (button == 8) setCommandCard(2); // Change Pod
		} else if (commandCardID == 1) {
			if (button == 8) setCommandCard(0); // Cancel
			else {
				changeWeapon(playerID, button);
				setCommandCard(0);
			}
		} else if (commandCardID == 2) {
			if (button == 8) setCommandCard(0); // Cancel
			else {
				changePod(playerID, button);
				setCommandCard(0);
			}
		}
		// Screen.printf("Player: {} BTN: {} CC: {}", playerID, button, PlayerCommandCard[playerID]);
	}
}

function onPluginStart() {
	setupMap();
	setcurpl($P1);
	DisplayText("Spawned");
}

function beforeTriggerExec() {
	SetMemory(0x6509A0, SetTo, 0);
}

function afterTriggerExec() {
    EUDPlayerLoop()();
    	const playerID = getcurpl();
		if (PlayerMech[playerID] != 0) handleMech(playerID, PlayerMech[playerID]);
    EUDEndPlayerLoop();
}
